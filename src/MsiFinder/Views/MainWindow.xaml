<Window x:Class="MsiFinder.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:forms="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:model="clr-namespace:MsiFinder.Model"
        xmlns:s="clr-namespace:MsiFinder.Selectors"
        xmlns:viewModel="clr-namespace:MsiFinder.ViewModel"
        xmlns:views="clr-namespace:MsiFinder.Views"
        Title="{Binding Source={x:Static forms:Application.ProductVersion}, StringFormat='MSI Finder {0}'}"
        Width="720"
        Height="570"
        MinWidth="600"
        MinHeight="300"
        Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
        DataContext="{Binding Source={StaticResource Locator}, Path=Main}"
        ResizeMode="CanResizeWithGrip"
        WindowStartupLocation="CenterScreen"
        mc:Ignorable="d">

    <Window.Resources>

        <DataTemplate DataType="{x:Type viewModel:TextItemViewModel}">
            <Grid>
                <TextBlock Text="{Binding Text}">
                    <TextBlock.Style>
                        <Style BasedOn="{StaticResource LoadingTextBlockStyle}" TargetType="TextBlock">
                            <Setter Property="Visibility" Value="Collapsed" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Type}" Value="{x:Static model:TextItemType.Information}">
                                    <Setter Property="Visibility" Value="Visible" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <TextBlock Text="{Binding Text}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Visibility" Value="Collapsed" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Type}" Value="{x:Static model:TextItemType.Error}">
                                    <Setter Property="Visibility" Value="Visible" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=TreeViewItem}}" Value="False">
                                    <Setter Property="Foreground" Value="Red" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </Grid>
        </DataTemplate>

        <HierarchicalDataTemplate DataType="{x:Type viewModel:ComponentViewModel}" ItemsSource="{Binding Items}">
            <views:ComponentView />
        </HierarchicalDataTemplate>

        <HierarchicalDataTemplate DataType="{x:Type viewModel:ProductViewModel}" ItemsSource="{Binding Items}">
            <views:ProductView />
        </HierarchicalDataTemplate>

        <Style TargetType="ResizeGrip">
            <Setter Property="Margin" Value="2" />
        </Style>

    </Window.Resources>

    <DockPanel LastChildFill="True">

        <Grid Margin="8" DockPanel.Dock="Top">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <GroupBox Grid.Column="0"
                      Margin="0,0,8,0"
                      Padding="4"
                      Header="Search Type"
                      IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}">
                <ListBox SelectedItem="{Binding SearchFor, Mode=TwoWay}" Style="{StaticResource PlainListBoxStyle}">
                    <ListBox.ItemsSource>
                        <x:Array Type="model:SearchFor">
                            <model:SearchFor>Product</model:SearchFor>
                            <model:SearchFor>Component</model:SearchFor>
                        </x:Array>
                    </ListBox.ItemsSource>
                    <ListBox.ItemTemplate>
                        <DataTemplate DataType="{x:Type model:SearchFor}">
                            <RadioButton Margin="0,0,16,0" Content="{Binding}">
                                <RadioButton.IsChecked>
                                    <Binding Mode="TwoWay"
                                             Path="IsSelected"
                                             RelativeSource="{RelativeSource AncestorType=ListBoxItem}" />
                                </RadioButton.IsChecked>
                            </RadioButton>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </GroupBox>
            <GroupBox Grid.Column="1"
                      Padding="4"
                      Header="Filter"
                      IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}">
                <ListBox SelectedItem="{Binding SearchBy, Mode=TwoWay}" Style="{StaticResource PlainListBoxStyle}">
                    <ListBox.ItemsSource>
                        <x:Array Type="model:SearchBy">
                            <model:SearchBy>None</model:SearchBy>
                            <model:SearchBy>Code</model:SearchBy>
                            <model:SearchBy>Name</model:SearchBy>
                            <model:SearchBy>Location</model:SearchBy>
                        </x:Array>
                    </ListBox.ItemsSource>
                    <ListBox.ItemTemplate>
                        <DataTemplate DataType="{x:Type model:SearchBy}">
                            <RadioButton Margin="0,0,16,0" Content="{Binding}">
                                <RadioButton.IsChecked>
                                    <Binding Mode="TwoWay"
                                             Path="IsSelected"
                                             RelativeSource="{RelativeSource AncestorType=ListBoxItem}" />
                                </RadioButton.IsChecked>
                            </RadioButton>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                    <ListBox.ItemContainerStyle>
                        <Style BasedOn="{StaticResource PlainListBoxItemStyle}" TargetType="ListBoxItem">
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Source={StaticResource Locator}, Path=Main.SearchFor}" Value="{x:Static model:SearchFor.Component}" />
                                        <Condition Binding="{Binding}" Value="{x:Static model:SearchBy.Name}" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Source={StaticResource Locator}, Path=Main.SearchFor}" Value="{x:Static model:SearchFor.Component}" />
                                        <Condition Binding="{Binding}" Value="{x:Static model:SearchBy.Location}" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ListBox.ItemContainerStyle>
                </ListBox>
            </GroupBox>
        </Grid>

        <Grid Height="23"
              Margin="8,0"
              DockPanel.Dock="Top">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0" Margin="0,0,8,0">
                <TextBox Name="SearchTextBox" Text="{Binding SearchQuery, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <TextBox.Style>
                        <Style BasedOn="{StaticResource ControlStyle}" TargetType="TextBox">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsBusy}" Value="True">
                                    <Setter Property="IsEnabled" Value="False" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SearchBy}" Value="{x:Static model:SearchBy.None}">
                                    <Setter Property="IsEnabled" Value="False" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>
                <TextBlock Margin="4,1"
                           IsHitTestVisible="False"
                           Opacity="0.3">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Visibility" Value="Collapsed" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SearchBy}" Value="{x:Static model:SearchBy.Code}">
                                    <Setter Property="Text" Value="Enter product/component code, such as '32B140BD-8636-41AD-8CF9-0B88ECD0119A'" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SearchBy}" Value="{x:Static model:SearchBy.Name}">
                                    <Setter Property="Text" Value="Enter full or partial product name" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SearchBy}" Value="{x:Static model:SearchBy.Location}">
                                    <Setter Property="Text" Value="Enter product install location (wildcards are supported), such as 'C:\Program Files\*'" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=SearchTextBox, Path=Text}" Value="">
                                    <Setter Property="Visibility" Value="Visible" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </Grid>
            <Button Grid.Column="1" Width="70">
                <Button.Style>
                    <Style TargetType="Button">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsBusy}" Value="False">
                                <Setter Property="Content" Value="Search" />
                                <Setter Property="IsDefault" Value="True" />
                                <Setter Property="Command" Value="{Binding SearchCommand}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsBusy}" Value="True">
                                <Setter Property="Content" Value="Stop" />
                                <Setter Property="IsCancel" Value="True" />
                                <Setter Property="Command" Value="{Binding StopCommand}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </Grid>

        <StatusBar DockPanel.Dock="Bottom">
            <StatusBarItem>
                <TextBlock Margin="4,0" Text="{Binding StringFormat='Found {0} item(s)', Path=Results.Count}" />
            </StatusBarItem>
        </StatusBar>

        <TreeView Name="TreeView"
                  Margin="8"
                  ItemsSource="{Binding Results}">
            <TreeView.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{x:Static SystemColors.HighlightColor}" />
                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="{x:Static SystemColors.HighlightTextColor}" />
            </TreeView.Resources>
            <TreeView.InputBindings>
                <KeyBinding Key="C" Modifiers="Ctrl">
                    <KeyBinding.Command>
                        <Binding ElementName="TreeView" Path="SelectedItem.(viewModel:RecordViewModel.CopyCodeCommand)" />
                    </KeyBinding.Command>
                </KeyBinding>
                <KeyBinding Key="Enter" Modifiers="Alt">
                    <KeyBinding.Command>
                        <Binding ElementName="TreeView" Path="SelectedItem.(viewModel:ProductViewModel.ShowDetailsCommand)" />
                    </KeyBinding.Command>
                </KeyBinding>
            </TreeView.InputBindings>
            <TreeView.ItemContainerStyleSelector>
                <s:ItemStyleSelector>
                    <s:ItemStyleSelector.ComponentStyle>
                        <Style TargetType="TreeViewItem">
                            <Setter Property="Padding" Value="4" />
                            <EventSetter Event="MouseRightButtonDown" Handler="TreeViewItemRightMouseDown" />
                            <Setter Property="ContextMenu">
                                <Setter.Value>
                                    <ContextMenu d:DataContext="{d:DesignInstance viewModel:ComponentViewModel}">
                                        <MenuItem Command="{Binding CopyCodeCommand}"
                                                  Header="Copy Code"
                                                  InputGestureText="Ctrl+C" />
                                        <MenuItem Command="{Binding CopyRegistryCodeCommand}" Header="Copy Code (Registry Format)" />
                                        <Separator />
                                        <MenuItem Command="{Binding OpenWindowsExplorerCommand}" Header="Open in Windows Explorer" />
                                        <MenuItem Command="{Binding OpenRegistryEditorCommand}" Header="Open in Registry Editor" />
                                    </ContextMenu>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </s:ItemStyleSelector.ComponentStyle>
                    <s:ItemStyleSelector.ProductStyle>
                        <Style TargetType="TreeViewItem">
                            <Setter Property="Padding" Value="4" />
                            <EventSetter Event="MouseRightButtonDown" Handler="TreeViewItemRightMouseDown" />
                            <Setter Property="ContextMenu">
                                <Setter.Value>
                                    <ContextMenu d:DataContext="{d:DesignInstance viewModel:ProductViewModel}">
                                        <MenuItem Command="{Binding ShowDetailsCommand}"
                                                  Header="Details"
                                                  InputGestureText="Alt+Enter" />
                                        <Separator />
                                        <MenuItem Command="{Binding CopyCodeCommand}"
                                                  Header="Copy Code"
                                                  InputGestureText="Ctrl+C" />
                                        <MenuItem Command="{Binding CopyRegistryCodeCommand}" Header="Copy Code (Registry Format)" />
                                        <Separator />
                                        <MenuItem Command="{Binding OpenWindowsExplorerCommand}" Header="Open in Windows Explorer" />
                                        <MenuItem Command="{Binding OpenRegistryEditorCommand}" Header="Open in Registry Editor" />
                                        <Separator />
                                        <MenuItem Command="{Binding RepairCommand}" Header="Repair" />
                                        <MenuItem Command="{Binding UninstallCommand}" Header="Uninstall" />
                                    </ContextMenu>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </s:ItemStyleSelector.ProductStyle>
                    <s:ItemStyleSelector.TextItemStyle>
                        <Style TargetType="TreeViewItem">
                            <Setter Property="Padding" Value="4" />
                        </Style>
                    </s:ItemStyleSelector.TextItemStyle>
                </s:ItemStyleSelector>
            </TreeView.ItemContainerStyleSelector>
        </TreeView>

    </DockPanel>

</Window>